[{"authors":null,"categories":null,"content":"1. 致谢 感谢金主爸爸们的投喂！本咸鱼写博客纯属用爱发电，没想到居然真能换到茶叶蛋钱，这下更有动力摸鱼更新了（老板：？）\n2. 打赏名单 以下是打赏名单列表:\n打赏时间 打赏者 打赏方式 打赏金额 2025.3.21 **文 支付宝 ￥0.1 2025.5.20 *民 微信 ￥1 ","date":1748046214,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748049546,"objectID":"13e23b0fba5009f20ac372d2c13bc1da","permalink":"https://zhuzhulang.github.io/blog/reward/","publishdate":"2025-05-24T08:23:34+08:00","relpermalink":"/reward/","section":"","summary":"1. 致谢 感谢金主爸爸们的投喂！本咸鱼写博客纯属用爱发电，没想到居然真能换到茶叶蛋钱，这下更有动力摸鱼更新了（老板：？）\n2. 打赏名单 以下是打赏名单列表:\n打赏时间 打赏者 打赏方式 打赏金额 2025.3.21 **文 支付宝 ￥0.1 2025.5.20 *民 微信 ￥1 ","tags":null,"title":"感谢网友打赏","type":"page"},{"authors":[],"categories":["AI实战"],"content":"没想到介绍Dify二次开发第4篇文章竟然是重置登录邮箱的,这个实在太简单了,可以说毫无难度,只是官方文档里面没有写。至于第3篇还在修改中,预计很快就能上线了。 在官方文档中介绍了如何重置管理员密码,详情可以参考,使用的方式是:\ndocker exec -it docker-api-1 flask reset-password\r如果想重置管理员密码呢?此时有两种方式,一种是直接进入数据库修改密码,其中的数据库是dify:\n但是这种方式很容易不小心就把数据库给搞坏了。 下面推荐一种更为靠谱的方式,就是使用官方提供的命令:\ndocker exec -it docker_api_1 flask reset-email\r然后就会在终端中出现对应的信息:\n可以看到最终更新邮箱成功了。 这个功能看似没用,实际上在二次开发中特别是权限管理时还有有些用处的。比如添加新的账户的场景,这里就不赘述了,操作难度不大。\n","date":1747898214,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748001440,"objectID":"f51e174c8852546015273449badae4d1","permalink":"https://zhuzhulang.github.io/blog/posts/how-to-reset-email-in-dify/","publishdate":"2025-05-22T15:16:54+08:00","relpermalink":"/posts/how-to-reset-email-in-dify/","section":"posts","summary":"如何重置Dify的管理员邮箱","tags":["AI"],"title":"Dify二次开发-重置管理员邮箱","type":"posts"},{"authors":[],"categories":["AI实战"],"content":"前言 之前介绍了如何搭建Dify的环境,可以说是非常的简单,没什么难度。下面开始正式进行Dify的二次开发,预计要分多篇文章来叙述了。 整体来说,二次Dify开发难度并不大,可能会有一些坑,但是对于经验丰富的我来说都不成问题。不知道谁说Dify是高级Python工程师应有的水平,我只能呵呵了。 废话不多说,这里先实现个小小的目标,自定义模型服务商吧。首先提前申明下下面的代码是基于0.15.3的。 在官方文档中有如下这么一个提示:\n相关内容可以参考。可以看到,如果要使用插件功能,只能升级到1.0.0版本。而且Dify这个项目更新很快,换句话说就是很不稳定。\n新增模型提供商 下面开始正式的操作。先创建1个doga的包,主要是纪念如下的人物:\n这里没什么恶意,仅仅是学习而已。整个包的目录结构如下:\ndoga ├── _assets │ ├── icon_l_en.png │ └── icon_s_en.png ├── doga.py ├── doga.yaml ├── __init__.py └── llm ├── doga-1.0.yaml ├── __init__.py └── llm.py 其中_assets目录用于存储logo,而dogma.yaml是配置文件。 在doga.yaml中先定义如下的内容:\nprovider: doga\rlabel:\ren_US: Doga\rzh_Hans: 卡波苏\rdescription:\rzh_Hans: 卡波苏模型\ren_US: doga model\ricon_small:\ren_US: icon_s_en.png\rzh_Hans: icon_s_en.png\ricon_large:\ren_US: icon_l_en.png\rzh_Hans: icon_l_en.png\rbackground: \u0026#34;#93c5fd\u0026#34;\rsupported_model_types:\r- llm\rconfigurate_methods:\r- predefined-model\rprovider_credential_schema:\rcredential_form_schemas:\r- variable: doga_api_key\rlabel:\ren_US: API Key\rtype: secret-input\rrequired: true\rplaceholder:\rzh_Hans: 请在此输入您的API Key\ren_US: Please enter your API Key\r- variable: doga_endpoint_url\rlabel:\rzh_Hans: 自定义API endpoint地址\ren_US: Custom API endpoint URL\rtype: text-input\rrequired: false\rplaceholder:\rzh_Hans: Base URL, e.g. https://api.example.com/v1\ren_US: Base URL, e.g. https://api.example.com/v1 相关的说明可以查看参考文章中的链接。由于该模态只支持LLM对话,因此只有llm子包,其中的llm.py中需要实现一个继承自LargeLanguageModel的自定义类,该类需要实现如下一些方法:\n_invoke,模型运行调用 get_num_tokens,预计算输入 tokens validate_credentials,模型凭据校验 _invoke_error_mapping,调用异常错误映射表 相关的代码这里就赘述了,完整的代码可以参考。\n最终效果 最后是更新后的效果,成功出现了自己定义的模型提供商:\n配置出现如下的页面:\n输入对应的API key后,我们创建一个空白的应用进行测试:\n选择新增的模型提供商,再输入相应的内容可以看到如下的结果:\n可以说,整个过程还是很简单的,只需要按照说明进行操作即可。\n参考文章:\nhttps://docs.dify.ai/zh-hans/guides/model-configuration/new-provider\nhttps://docs.dify.ai/zh-hans/guides/model-configuration/predefined-model\n","date":1747725414,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748045521,"objectID":"0869d5f0e50d852d604cf45c22a08f95","permalink":"https://zhuzhulang.github.io/blog/posts/how-to-add-custom-providers/","publishdate":"2025-05-20T15:16:54+08:00","relpermalink":"/posts/how-to-add-custom-providers/","section":"posts","summary":"如何在Dify上新增模型提供商","tags":["AI"],"title":"Dify二次开发-新增模型提供商","type":"posts"},{"authors":[],"categories":["AI实战"],"content":"\n搭建前准备工序 其实Dify是个传统的东西,只是搭上了AI的快车。下面简单说下其搭建过程。 在开始之前,先看下自己服务器的配置是否满足如下的条件:\n硬件方面必须是双核4G内存,这很容易满足。磁盘大约需要占用15G,而软件方面Docker版本必须大于19.03且Docker Compose需要大于1.28。因为Docker版本18.x存在线程创建限制。 不妨这么进行查看:\n~$ docker --version Docker version 19.03.15, build 99e3ed8919 ~$ docker-compose --version docker-compose version 1.29.0, build 07737305 相比几十M的版本2,更喜欢只有10来M的版本1,这里直接使用如下方式下载Docker-Compose:\nwget http://github.com/docker/compose/releases/download/1.29.0/docker-compose-linux-x86_64 chmod +x docker-compose-linux-x86_64 mv docker-compose-linux-x86_64 /usr/bin/docker-compose 开始搭建环境 一切准备就绪,开始拉取代码:\n# 假设当前最新版本为 0.15.3 git clone https://github.com/langgenius/dify.git --branch 0.15.3 进入源代码的docker目录并开始拉取并打包:\ncd dify/docker cp .env.example .env sudo docker-compose up -d 一堆操作猛如虎,难就难在国内Docker-Hub访问不了。按照下面方式修改镜像源:\nsudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;:[ \u0026#34;https://docker.1ms.run\u0026#34;, \u0026#34;https://docker.xuanyuan.me\u0026#34;, \u0026#34;http://hub-mirror.c.163.com\u0026#34;, \u0026#34;https://docker.m.daocloud.io\u0026#34; ] } EOF sudo systemctl daemon-reload \u0026amp;\u0026amp; sudo systemctl restart docker 重新拉取,经过1个多小时后,如果网速不怎么好的情况下,最终安装完成的截图:\n别忘了初始化管理员账户即可使用了:\n# 本地环境 http://localhost/install # 服务器环境 http://your_server_ip/install 如下图所示:\n访问Dify的URL即可使用:\n# 本地环境 http://localhost # 服务器环境 http://your_server_ip 探索页面如下:\n效果如下:\n常见问题 如果使用docker-compose成功拉取镜像但是出不来管理员账户页面且出现502问题,大概率是容器没有创建线程的权限,修改docker-compose.yaml中api部分的内容:\napi: image: langgenius/dify-api:0.15.3 privileged: true cap_add: - SYS_ADMIN ulimits: nproc: 65535 security_opt: - seccomp:unconfined 可以看到docker容器的日志是否出现如下的异常:\nOpenBLAS blas_thread_init: pthread_create failed for thread 7 of 32: Operation not permitted OpenBLAS blas_thread_init: RLIMIT_NPROC -1 current, -1 max 参考文章:\nhttps://docs.dify.ai/zh-hans/getting-started/install-self-hosted/docker-compose\n","date":1747466214,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748007063,"objectID":"194a43e3487b02682c72ef6c6b74ab4c","permalink":"https://zhuzhulang.github.io/blog/posts/how-to-build-dify-environment/","publishdate":"2025-05-17T15:16:54+08:00","relpermalink":"/posts/how-to-build-dify-environment/","section":"posts","summary":"如何搭建Dify环境","tags":["AI"],"title":"Dify二次开发-环境搭建","type":"posts"},{"authors":[],"categories":["AI实战"],"content":"前言 如果非要说什么的话,那就是用OCR来识别文件内容其实是把问题复杂化的表现,但是应用场景还是有那么一些,比如古籍的扫描后文字的识别,毕竟人工成本还是比较高的。 先来看个自拍的图片:\n可以很清楚看到其中的图片,下面开始编写相关的代码:\nfrom paddleocr import PPStructure\rtable_engine = PPStructure(show_log=True)\rimg_path=\u0026#34;20250422094717.jpg\u0026#34;\rresult = table_engine(img_path)\rfor line in result:\rif line[\u0026#34;type\u0026#34;] == \u0026#34;Table\u0026#34;:\rhtml = line[\u0026#34;res\u0026#34;][\u0026#34;html\u0026#34;] 其中html变量就是识别出来的HTML代码,其效果如下:\n我们为其添加一个像素的边框后可以看到其内容识别的并不全。预计是没有进行预处理的,导致其版面识别就有问题,自然影响后续内容的识别。\n识别截图 接着来看一张从PDF中的截图,这张图片相对来说比较干净,因为只有黑白两种颜色,是很适合OCR进行处理的。\n其效果如下:\n可以看到其成功将表格识别出来了,另外最后一行中10.76%的值漏掉了点号,因此还需要后处理进行校正。\n","date":1745288214,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748007479,"objectID":"ee48e8ddccb20b7e35282bfddb7ad5d5","permalink":"https://zhuzhulang.github.io/blog/posts/how-to-use-paddleocr-recognition-table/","publishdate":"2025-04-22T10:16:54+08:00","relpermalink":"/posts/how-to-use-paddleocr-recognition-table/","section":"posts","summary":"将介绍如何通过PaddleOCR实现表格识别的需求","tags":["AI"],"title":"使用PaddleOCR进行表格识别","type":"posts"},{"authors":[],"categories":["AI实战"],"content":"最近突发奇想实现一个API功能,就是输入一个歌曲,可以自动下载其相应的歌词。话不多说,干就是了。\n虽然可以借助163MusicLyrics这样的开源工具,但是为了更好的嵌入到程序中,于是只好从头造轮子。\n假设找到了1个网站,它提供了相应的歌词,但是没有提供下载。此时我们可以借助AI来帮助把歌词提取出来。这里以陈奕迅的《孤勇者》作为例子,其界面如下:\n下面我们在AI中输入如下一段话:\n从以下网址中提取出歌曲的歌词,格式为LRC: https://www.gecimao.com/geci/316835.html\r其结果如下:\n可以看到AI工具真的一次不差的帮助我们把其歌词提取出来了,而且还是LRC格式的。此时不得不说AI真的强大。这只是AIGC中的一个小小的应用。基于大模型的AI还是可以理解人类的意思进行相关操作的。\n","date":1741745814,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748008879,"objectID":"0b6deba5b8c6061598b99821cb37214a","permalink":"https://zhuzhulang.github.io/blog/posts/how-to-use-ai-extract-lyrics/","publishdate":"2025-03-12T10:16:54+08:00","relpermalink":"/posts/how-to-use-ai-extract-lyrics/","section":"posts","summary":"如何使用AI智能地从网页中提取歌词","tags":["AI"],"title":"使用AI提取歌词","type":"posts"}]