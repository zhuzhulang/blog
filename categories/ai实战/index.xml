<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI实战 on 码力全开</title><link>https://zhuzhulang.github.io/blog/categories/ai%E5%AE%9E%E6%88%98/</link><description>Recent content in AI实战 on 码力全开</description><generator>Hugo</generator><language>zh-cn</language><copyright>✨ 原创不易，转载请注明作者和链接哦~</copyright><lastBuildDate>Tue, 17 Jun 2025 16:40:53 +0800</lastBuildDate><atom:link href="https://zhuzhulang.github.io/blog/categories/ai%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL + 向量搜索:解锁关系型数据库的AI潜能</title><link>https://zhuzhulang.github.io/blog/posts/how-to-use-postgresql-as-vector-database/</link><pubDate>Tue, 17 Jun 2025 16:04:15 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-use-postgresql-as-vector-database/</guid><description>&lt;p>国内的软件环境,实际上PostgreSQL用的企业并不是,但是PostgreSQL提供了一些扩展可以让关系型数据库转换为向量数据库。&lt;/p>
&lt;p>借助PostgreSQL的向量化扩展,其支持:&lt;/p>
&lt;ul>
&lt;li>提取并搜索最近邻&lt;/li>
&lt;li>支持单精度、半精度、二进制和稀疏向量&lt;/li>
&lt;li>任何语言的PostgreSQL客户端&lt;/li>
&lt;li>支持多种距离度量方式,如L2距离、内积等6种方法&lt;/li>
&lt;/ul>
&lt;p>在PostgreSQL中提供了2种扩展:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pgvector/pgvector">pg_vector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/neondatabase-labs/pg_embedding">pg_embedding&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>这2种扩展都提供了对HNSW索引的支持,但是前者还提供了IVFFlat的支持。关于这部分内容实际上是数据挖掘中的内容,这里就不赘述了。更多内容可以参考之前的文章&lt;a href="https://www.cnblogs.com/commuter/p/18798529">HNSW算法简述&lt;/a>。需要注意的是,后者现在处于维护状态,换句话就是作者现在不维护了。&lt;/p>
&lt;p>如果说向量数据库有什么用,实际上跟Dify并没有太大的联系。主要还是RAG的热度让其被大家所熟知,而该领域也只是个细分的领域,可以说是坑还是蛮多的。对于中小企业就不要想了,因为其成本根本不是企业能承受的。因此更多只是停留在demo阶段。&lt;/p>
&lt;p>实际上除了RAG外,向量化还可以用于其他领域,比如听歌识曲这样的app。使用向量数据库可以很轻松解决查询效率慢的问题。&lt;/p>
&lt;p>关于&lt;code>pg_vector&lt;/code>扩展的使用可以参考原来项目。需要注意的是,其对PostgreSQL的版本要求是&lt;code>&amp;gt;=13.0&lt;/code>。如果你使用的是低版本,就不要考虑了。其安装方法主要有2种:&lt;/p>
&lt;ul>
&lt;li>通过下载源码并编译&lt;/li>
&lt;li>使用docker镜像&lt;/li>
&lt;/ul>
&lt;p>而docker镜像可以使用类似如下的方法:&lt;/p>
&lt;pre>
docker pull pgvector/pgvector:pg[version]
&lt;/pre>
&lt;p>其中version替换为对应的数值,比如13、17,分别表示PostgreSQL版本13和17的镜像。&lt;/p>
&lt;p>而源码安装的方式如下,首先是Linux和MacOS环境:&lt;/p>
&lt;pre>
cd /tmp
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
make
make install # may need sudo
&lt;/pre>
&lt;p>可以将&lt;code>v0.8.0&lt;/code>替换为任何版本,如&lt;code>v0.6.0&lt;/code>。
而在Windows上则需要进行额外的配置,需要确保已经安装了Visual Studio 2022:&lt;/p>
&lt;pre>
set "PGROOT=\path\to\PostgreSQL\17"
cd %TEMP%
git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git
cd pgvector
nmake /F Makefile.win
nmake /F Makefile.win install
&lt;/pre>
&lt;p>因此一般测试使用建议通过Docker的方式进行安装。&lt;/p>
&lt;p>安装完成后,就可以创建对应的扩展:&lt;/p>
&lt;pre>
CREATE EXTENSION vector;
&lt;/pre>
&lt;p>而在创建表时添加对应的向量列,例如:&lt;/p>
&lt;pre>
CREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));
&lt;/pre>
&lt;p>而插入向量则以如下的方式进行添加:&lt;/p></description></item><item><title>Dify二次开发-新增图表类型</title><link>https://zhuzhulang.github.io/blog/posts/how-to-add-new-chart-in-plugins/</link><pubDate>Mon, 16 Jun 2025 07:20:24 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-add-new-chart-in-plugins/</guid><description>如何根据实际需求新增图表</description></item><item><title>Dify二次开发-生成图表</title><link>https://zhuzhulang.github.io/blog/posts/how-to-use-dify-generate-graph/</link><pubDate>Sun, 15 Jun 2025 15:09:13 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-use-dify-generate-graph/</guid><description>如何在Dify中根据数据库中的数据生成图表</description></item><item><title>Dify二次开发-使用MCP协议查询数据库数据</title><link>https://zhuzhulang.github.io/blog/posts/how-to-use-mcp-protocol-query-data/</link><pubDate>Fri, 13 Jun 2025 20:27:30 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-use-mcp-protocol-query-data/</guid><description>如何通过MCP协议对数据库中数据进行查询</description></item><item><title>Dify二次开发-新增工具</title><link>https://zhuzhulang.github.io/blog/posts/how-to-add-custom-tool/</link><pubDate>Sat, 24 May 2025 22:55:27 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-add-custom-tool/</guid><description>在Dify上新增内置工具</description></item><item><title>Dify二次开发-重置管理员邮箱</title><link>https://zhuzhulang.github.io/blog/posts/how-to-reset-email-in-dify/</link><pubDate>Thu, 22 May 2025 15:16:54 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-reset-email-in-dify/</guid><description>如何重置Dify的管理员邮箱</description></item><item><title>Dify二次开发-新增模型提供商</title><link>https://zhuzhulang.github.io/blog/posts/how-to-add-custom-providers/</link><pubDate>Tue, 20 May 2025 15:16:54 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-add-custom-providers/</guid><description>如何在Dify上新增模型提供商</description></item><item><title>Dify二次开发-环境搭建</title><link>https://zhuzhulang.github.io/blog/posts/how-to-build-dify-environment/</link><pubDate>Sat, 17 May 2025 15:16:54 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-build-dify-environment/</guid><description>如何搭建Dify环境</description></item><item><title>使用PaddleOCR进行表格识别</title><link>https://zhuzhulang.github.io/blog/posts/how-to-use-paddleocr-recognition-table/</link><pubDate>Tue, 22 Apr 2025 10:16:54 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-use-paddleocr-recognition-table/</guid><description>将介绍如何通过PaddleOCR实现表格识别的需求</description></item><item><title>使用AI提取歌词</title><link>https://zhuzhulang.github.io/blog/posts/how-to-use-ai-extract-lyrics/</link><pubDate>Wed, 12 Mar 2025 10:16:54 +0800</pubDate><guid>https://zhuzhulang.github.io/blog/posts/how-to-use-ai-extract-lyrics/</guid><description>如何使用AI智能地从网页中提取歌词</description></item></channel></rss>